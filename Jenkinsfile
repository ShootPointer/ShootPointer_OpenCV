pipeline {
    agent any

    environment {
        WORKDIR = '/var/jenkins_home/workspace/fastapi-app'        // FastAPI ÌîÑÎ°úÏ†ùÌä∏ Í≤ΩÎ°ú
        COMPOSE_SERVICE = 'fast-api'                // docker-compose ÏÑúÎπÑÏä§Î™Ö
        IMAGE_NAME = 'fastapi-app:latest'
    }

    stages {

        stage('Prepare') {
            steps {
                echo "üîÑ Cloning FastAPI Repository..."
                dir("${WORKDIR}") {
                    git branch: 'main', url: 'https://github.com/ShootPointer/ShootPointer_OpenCV.git'
                }
            }
            post {
                success { sh 'echo "‚úÖ Successfully Cloned Repository"' }
                failure { sh 'echo "‚ùå Failed to Clone Repository"' }
            }
        }

        stage('Replace .env File') {
            steps {
                echo "üîê Copying Secret .env file..."
                script {
                    withCredentials([file(credentialsId: 'SECRET_FILE_OPEN_CV', variable: 'secretFile')]) {
                        sh 'cp $secretFile ${WORKDIR}/.env'
                    }
                }
            }
            post {
                success { sh 'echo "‚úÖ Successfully Replaced .env File"' }
                failure { sh 'echo "‚ùå Failed to Replace .env File"' }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir("${WORKDIR}") {
                    sh 'echo "üê≥ Building FastAPI Docker Image..."'
                    sh '''
                    docker build -t ${IMAGE_NAME} .
                    '''
                }
            }
            post {
                success { sh 'echo "‚úÖ Successfully Built Docker Image"' }
                failure { sh 'echo "‚ùå Failed to Build Docker Image"' }
            }
        }

        stage('Deploy FastAPI Container') {
            steps {
                dir("${WORKDIR}") {
                    sh 'echo "üöÄ Deploying FastAPI Container..."'
                    script {
                        def running = sh(script: "docker ps -q -f name=${COMPOSE_SERVICE}", returnStdout: true).trim()

                        if (running) {
                            sh 'echo "üõë Stopping and Removing Existing Container..."'
                            sh "docker stop ${COMPOSE_SERVICE} || true"
                            sh "docker rm -f ${COMPOSE_SERVICE} || true"
                        }

                        sh 'echo "üöÄ Starting New FastAPI Container..."'
                        sh "docker-compose up -d --build ${COMPOSE_SERVICE}"
                    }
                }
            }
            post {
                success { sh 'echo "‚úÖ Successfully Deployed FastAPI Container"' }
                failure { sh 'echo "‚ùå Failed to Deploy FastAPI Container"' }
            }
        }

        stage('Clean Up Old Images') {
            steps {
                sh 'echo "üßπ Cleaning Up Unused Docker Images..."'
                sh 'docker image prune -f || true'
            }
            post {
                success { sh 'echo "‚úÖ Successfully Cleaned Up Old Images"' }
                failure { sh 'echo "‚ùå Failed to Clean Up Images"' }
            }
        }
    }

    post {
        success {
            sh 'echo "üéâ FastAPI Deployment Completed Successfully!"'
        }
        failure {
            sh 'echo "üí• FastAPI Deployment Failed. Check the Logs Above."' 
        }
    }
}
